#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Function to print the board
void printBoard(int **board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", board[i][j] ? 'Q' : '.');
        }
        printf("\n");
    }
    printf("\n");
}

// Check if it's safe to place a queen at board[row][col]
bool isSafe(int **board, int row, int col, int N) {
    int i, j;

    // Check column above
    for (i = 0; i < row; i++) {
        if (board[i][col]) return false;
    }

    // Check upper-left diagonal
    for (i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) return false;
    }

    // Check upper-right diagonal
    for (i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++) {
        if (board[i][j]) return false;
    }

    return true;
}

// Recursive function to solve N-Queens
bool solveNQueens(int **board, int row, int N) {
    if (row == N) {
        printBoard(board, N);
        return true;
    }

    bool res = false;
    for (int col = 0; col < N; col++) {
        if (isSafe(board, row, col, N)) {
            board[row][col] = 1;
            res = solveNQueens(board, row + 1, N) || res;
            board[row][col] = 0;
        }
    }
    return res;
}

int main() {
    int N;

    printf("Enter the size of the board (N): ");
    scanf("%d", &N);

    if (N <= 0) {
        printf("Please enter a positive integer.\n");
        return 1;
    }

    // Dynamically allocate the board
    int **board = malloc(N * sizeof(int *));
    for (int i = 0; i < N; i++) {
        board[i] = calloc(N, sizeof(int));
    }

    if (!solveNQueens(board, 0, N)) {
        printf("No solution exists for N = %d\n", N);
    }

    // Free memory
    for (int i = 0; i < N; i++) {
        free(board[i]);
    }
    free(board);

    return 0;
}

