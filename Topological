#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int queue[MAX], front = 0, rear = 0;

void enqueue(int val) {
    queue[rear++] = val;
}

int dequeue() {
    return queue[front++];
}

int isEmpty() {
    return front == rear;
}

int main() {
    int n, e;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);

    int adj[MAX][MAX] = {0}; // adjacency matrix
    int indegree[MAX] = {0};
    int i, u, v;

    printf("Enter edges (u v) where edge is u -> v:\n");
    for (i = 0; i < e; i++) {
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;
    }

    // Calculate in-degree of each vertex
    for (u = 0; u < n; u++) {
        for (v = 0; v < n; v++) {
            if (adj[u][v] == 1)
                indegree[v]++;
        }
    }

    // Enqueue all vertices with in-degree 0
    for (i = 0; i < n; i++) {
        if (indegree[i] == 0)
            enqueue(i);
    }

    printf("Topological Order:\n");
    int count = 0;
    while (!isEmpty()) {
        int node = dequeue();
        printf("%d ", node);
        count++;

        for (v = 0; v < n; v++) {
            if (adj[node][v] == 1) {
                indegree[v]--;
                if (indegree[v] == 0)
                    enqueue(v);
            }
        }
    }

    if (count != n) {
        printf("\nGraph has a cycle. Topological ordering not possible.\n");
    }

    return 0;
}
