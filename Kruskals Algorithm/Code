#include <stdio.h>

#define MAX 30

int parent[MAX];

int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}

int unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    if (a != b) {
        parent[b] = a;
        return 1;
    }
    return 0;
}

int main() {
    int n, i, j, u, v, cost[MAX][MAX], edges = 0;
    int min, total_cost = 0;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter cost adjacency matrix (0 if no edge):\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 9999;  // Represents infinity
        }

    printf("Edges of MST:\n");
    while (edges < n - 1) {
        min = 9999;
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }

        if (unionSet(u, v)) {
            printf("%d -> %d : %d\n", u, v, min);
            total_cost += min;
            edges++;
        }

        cost[u][v] = cost[v][u] = 9999;
    }

    printf("Total cost of MST = %d\n", total_cost);
    return 0;
}
